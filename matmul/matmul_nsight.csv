"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.23",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","800.28",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","47762",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","22.40",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","0.05",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","59.62",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","18.96",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","22.40",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","45466.79",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","70.41",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved 13% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","3.80",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","16",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","# Pass Groups","","2",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.94",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.81",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","73.88",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.96",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","SM Busy","%","73.88",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (57.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Memory Throughput","Mbyte/second","161.03",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Mem Busy","%","11.20",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","22.40",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","45.54",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","100.00",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","10.26",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","One or More Eligible","%","74.02",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.74",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","No Eligible","%","25.98",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","8.29",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","3.53",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","11.20",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","11.24",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30.32",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 3.8 cycles being stalled waiting for the micro scheduler to select the warp to issue. Not selected warps are eligible warps that were not picked by the scheduler to issue that cycle as another warp was selected. A high number of not selected warps typically means you have sufficient warps to cover warp latencies and you may consider reducing the number of active warps to possibly increase cache coherence and data locality. This stall type represents about 33.7% of the total average of 11.2 cycles between issuing two instructions.","local","33.69"
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","33456",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Executed Instructions","inst","7761792",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","33589.53",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Issued Instructions","inst","7792772",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 1202688 fused and 668160 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 18% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","7.362"
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Block Size","","256",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Grid Size","","348",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","38",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","16.38",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","# SMs","SM","58",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Threads","thread","89088",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Uses Green Context","","0",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Waves Per SM","","1",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit SM","block","24",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit Registers","block","6",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit Shared Mem","block","16",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit Warps","block","6",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","48",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Theoretical Occupancy","%","100",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Achieved Occupancy","%","69.02",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","33.13",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (69.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","30.98"
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","200",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","2229248",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","45466.79",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","2767040",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","36257.58",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","1181088",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","45466.79",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","2767040",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","45377",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","11068160",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.07",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Branch Instructions","inst","537312",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Branch Efficiency","%","100",
"0","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.23",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","814.11",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","48219",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","22.48",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","0.06",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","58.94",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","18.85",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","22.48",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","45432.16",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","70.01",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved 13% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","3.80",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","16",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","PM Sampling","# Pass Groups","","2",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.95",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.79",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","73.93",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.96",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Compute Workload Analysis","SM Busy","%","73.93",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (57.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Memory Throughput","Mbyte/second","167.21",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Mem Busy","%","11.36",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","22.48",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","45.32",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","99.48",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","10.20",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","One or More Eligible","%","74.02",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.74",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","No Eligible","%","25.98",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","8.30",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","3.53",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","11.21",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","11.25",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30.32",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 3.8 cycles being stalled waiting for the micro scheduler to select the warp to issue. Not selected warps are eligible warps that were not picked by the scheduler to issue that cycle as another warp was selected. A high number of not selected warps typically means you have sufficient warps to cover warp latencies and you may consider reducing the number of active warps to possibly increase cache coherence and data locality. This stall type represents about 33.7% of the total average of 11.2 cycles between issuing two instructions.","local","33.68"
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","33456",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Executed Instructions","inst","7761792",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","33589.63",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Instruction Statistics","Issued Instructions","inst","7792795",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 1202688 fused and 668160 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 18% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","7.367"
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Block Size","","256",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Grid Size","","348",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","38",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","16.38",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","# SMs","SM","58",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Threads","thread","89088",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Uses Green Context","","0",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Launch Statistics","Waves Per SM","","1",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit SM","block","24",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit Registers","block","6",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit Shared Mem","block","16",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Block Limit Warps","block","6",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","48",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Theoretical Occupancy","%","100",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Achieved Occupancy","%","69.05",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","33.14",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (69.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","30.95"
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","205.33",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","2204672",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","45432.16",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","2782782",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","35594.58",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","1170120",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","45432.16",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","2782782",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","45379.24",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","11131128",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.07",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Branch Instructions","inst","537312",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Branch Efficiency","%","100",
"1","41250","python3.10","127.0.0.1","void at::native::<unnamed>::distribution_elementwise_grid_stride_kernel<float, (int)4, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::<unnamed>::distribution_nullary_kernel<c10::Half, float, (int)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_and_transform<c10::Half, float, (unsigned long)4, at::CUDAGeneratorImpl *, void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, T5)::[lambda(curandStatePhilox4_32_10 *) (instance 2)], void at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl *>(const at::TensorBase &, double, double, T1)::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 3)]::operator ()() const::[lambda(float) (instance 1)]>(at::TensorIteratorBase &, T4, const T5 &, T6)::[lambda(int, float) (instance 1)]>(int, at::PhiloxCudaState, T3, T4)","1","7","(256, 1, 1)","(348, 1, 1)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.57",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342220",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.37",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.27",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.04",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.32",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328328.43",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.06",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.10",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.77",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.37",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.12",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.67",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005734"
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04726"
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.94"
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.94"
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.94"
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421677.33",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15549440",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328328.43",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19724884",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338297.83",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8283216",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328328.43",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19724884",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327746.78",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78899536",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"2","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","809.48",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341272",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.52",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.12",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","419.01",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.16",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328306.03",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.30",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.11",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.30",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.52",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","51.97",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.75",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.00575"
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.0474"
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.7"
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.7"
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.56",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.7"
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421634.67",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15694848",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328306.03",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19668148",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338746.88",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8307912",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328306.03",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19668148",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327849.85",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78672592",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"3","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.15",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341448",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.48",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.30",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.40",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.40",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328296.22",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.23",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.11",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.85",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.48",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.20",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.73",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005746"
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04736"
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.77"
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.77"
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.77"
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421757.33",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15522816",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328296.22",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19684392",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338940.88",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8270352",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328296.22",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19684392",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327712.52",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78737568",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"4","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","815.97",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341849",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.46",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.22",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","416.32",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.36",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.32",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328364.29",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.17",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.09",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.62",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.46",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.12",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.71",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005744"
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04734"
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.83"
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.83"
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.83"
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421736",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15596544",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328364.29",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19698458",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338748.04",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8284104",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328364.29",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19698458",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327819.40",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78793832",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"5","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","815.14",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341981",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.39",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.19",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","417.02",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.26",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328232.57",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.11",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.13",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.52",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.39",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.05",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.65",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.69",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005737"
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04729"
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.89"
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.89"
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.89"
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421560",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15620096",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328232.57",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19711994",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339939.67",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8294184",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328232.57",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19711994",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327861.74",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78847976",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"6","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","821.95",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341266",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.52",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.36",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","412.67",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.37",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.48",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328176.52",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.30",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.14",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","49.02",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.52",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.27",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.69",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.75",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005749"
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04739"
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.7"
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.7"
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.7"
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421464",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15458304",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328176.52",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19669108",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339428.54",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8258856",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328176.52",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19669108",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327748.86",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78676432",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"7","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","807.98",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341638",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.46",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.07",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","420.38",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.39",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.00",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328163.07",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.18",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.15",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.15",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.46",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","51.81",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.71",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005743"
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04734"
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.82"
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.82"
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.82"
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421725.33",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15748096",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328163.07",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19696312",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338730.54",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8332560",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328163.07",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19696312",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327627.04",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78785248",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"8","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.73",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342565",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.29",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.24",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.36",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.36",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.25",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328126.48",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.97",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.16",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.2%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.2%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.66",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.29",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.07",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.71",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.65",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005726"
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.0472"
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","15.03"
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","15.03"
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2619"
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.58",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","15.03"
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421112",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15557632",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328126.48",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19743826",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339629.79",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8290776",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328126.48",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19743826",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327859.45",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78975304",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"9","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","821.68",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342256",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.36",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.31",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.05",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.36",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.28",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328269.12",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.04",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.12",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.87",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.36",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.08",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.67",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005733"
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04726"
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.96"
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.96"
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.96"
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421557.33",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15508480",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328269.12",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19728436",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338930.46",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8288952",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328269.12",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19728436",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327704.76",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78913744",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"10","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","820.14",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341714",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.44",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.30",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.21",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.33",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.41",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328487.59",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.17",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.71",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.06",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.85",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.44",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.21",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.71",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005742"
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04733"
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.77",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.23",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.83"
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.83"
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2616"
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.83"
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421544",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15515648",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328487.59",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19699040",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338729.96",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8269032",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328487.59",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19699040",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327559.06",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78796160",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"11","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","817.98",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342518",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.30",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.22",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","416.32",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.20",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328281.53",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.96",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.11",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.61",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.30",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.00",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.64",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005727"
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04721"
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","15.04"
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","15.04"
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","15.04"
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421586.67",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15594496",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328281.53",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19747472",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","337872.08",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8302200",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328281.53",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19747472",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327713.66",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78989888",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"12","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","822.86",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","343058",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.24",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.28",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.43",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.30",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.24",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328461.84",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.84",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.71",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.07",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.79",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.24",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.04",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.61",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005717"
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04715"
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.77",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.23",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","15.16"
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","15.16"
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2616"
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.56",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","15.16"
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421282.67",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15525888",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328461.84",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19775120",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338566.29",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8295528",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328461.84",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19775120",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327415.15",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","79100480",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"13","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","824.49",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342471",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.31",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.36",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","412.80",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.33",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.29",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328278.45",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.01",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.11",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","49.02",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.31",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.09",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.66",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005728"
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04721"
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.99"
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.99"
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.99"
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421557.33",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15463424",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328278.45",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19736118",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339830.17",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8287152",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328278.45",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19736118",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327654.35",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78944472",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"14","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","814.11",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342252",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.33",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.15",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","418.02",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.32",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.14",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328431.50",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.02",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.07",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.40",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.33",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","51.94",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.66",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.00573"
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04723"
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.98"
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.98"
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2616"
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.98"
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421472",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15660032",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328431.50",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19734204",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338553.42",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8310888",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328431.50",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19734204",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327866.31",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78936816",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"15","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","816.81",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342254",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.37",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.22",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","416.38",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.38",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.26",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328095.66",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.07",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.74",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.16",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.2%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.2%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.62",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.37",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.06",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.68",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005734"
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04726"
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.93"
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.93"
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2619"
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.93"
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421736",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15598592",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328095.66",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19721804",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339529.21",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8291664",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328095.66",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19721804",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327725.57",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78887216",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"16","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","817.13",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341653",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.45",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.26",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.55",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.36",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328222.45",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.21",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.13",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.73",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.45",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.17",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.72",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005742"
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04733"
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.79"
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.79"
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.79"
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421856",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15565824",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328222.45",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19690366",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","340046.46",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8276736",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328222.45",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19690366",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327759.83",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78761464",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"17","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","817.96",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341076",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.56",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.28",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.30",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.48",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328250.81",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.38",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.73",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.12",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.80",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.56",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.27",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.77",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005754"
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04743"
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.62"
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.62"
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.62"
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421224",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15519744",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328250.81",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19650960",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","337493.83",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8259192",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328250.81",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19650960",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327677.16",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78603840",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"18","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","818.94",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342265",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.35",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.26",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.52",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.22",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328364.31",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.02",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.09",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.72",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.35",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.03",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.66",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005733"
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04725"
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.98"
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.98"
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.98"
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421757.33",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15562752",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328364.31",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19732606",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","337398.58",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8298288",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328364.31",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19732606",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327789.98",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78930424",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"19","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.49",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","343066",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.26",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.24",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.94",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.34",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.26",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328320.81",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.88",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.19",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.10",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.65",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.26",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.07",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.35",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.62",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005721"
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04717"
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.77",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.23",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","15.12"
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","15.12"
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","15.12"
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421608",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15581184",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328320.81",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19765132",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338782.25",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8292456",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328320.81",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19765132",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327530.18",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","79060528",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"20","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","812.79",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341030",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.51",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.18",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","417.18",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.32",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.28",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328327.48",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.32",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.10",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.48",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.51",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.08",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.76",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005749"
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04739"
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.68"
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.68"
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.68"
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421338.67",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15626240",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328327.48",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19663040",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338728.83",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8289456",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328327.48",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19663040",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327761.16",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78652160",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"21","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","816.88",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342013",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.38",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.21",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","416.26",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.37",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.27",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328175.84",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.09",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.14",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.59",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.38",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.08",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.68",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005735"
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04728"
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.91"
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.91"
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.91"
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421386.67",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15593472",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328175.84",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19717942",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338987.92",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8289384",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328175.84",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19717942",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327805.62",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78871768",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"22","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","810.72",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341006",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.56",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.14",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","418.14",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.37",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.25",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328238.97",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.35",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.73",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.13",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.36",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.56",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.05",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.76",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005754"
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04743"
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.65"
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.09",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.65"
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.56",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.65"
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421309.33",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15664128",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328238.97",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19657772",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339484.46",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8293656",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328238.97",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19657772",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327815.28",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78631088",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"23","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.24",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341423",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.48",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.31",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.24",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.39",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.48",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328035.16",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.25",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.74",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.18",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.2%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.2%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.88",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.48",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.27",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.74",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005746"
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04736"
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.75"
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.1% of the total average of 10.1 cycles between issuing two instructions.","global","14.75"
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2619"
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.79",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.58",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.75"
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421861.33",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15516672",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328035.16",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19678922",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339097.62",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8259960",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328035.16",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19678922",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327684.35",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78715688",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"24","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","828.77",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342151",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.43",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.45",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","410.53",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.43",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328278.86",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.04",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.11",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","49.29",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.43",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.23",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.69",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.67",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005731"
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04732"
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.96"
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.96"
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.96"
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421538.67",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15379456",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328278.86",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19729606",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339259.33",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8265768",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328278.86",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19729606",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327641.94",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78918424",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"25","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","816.74",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","340975",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.55",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.27",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.04",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.36",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.43",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328207.24",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.35",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.73",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.13",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.75",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.55",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.21",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.77",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005752"
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04742"
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.65"
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.65"
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.65"
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421536",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15549440",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328207.24",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19656766",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","337297.25",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8267544",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328207.24",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19656766",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327620.13",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78627064",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"26","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","827.84",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342000",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.45",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.43",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","410.69",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.32",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.45",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328554.52",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.10",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.71",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.04",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.0%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.0%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","49.24",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.45",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.23",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.66",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.69",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005738"
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04733"
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.9"
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.9"
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2615"
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.75",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.56",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.9"
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421312",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15383552",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328554.52",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19715004",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339160.75",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8265384",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328554.52",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19715004",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327612.86",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78860016",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"27","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","816.97",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341516",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.48",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.25",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.46",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.34",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328301.72",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.24",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.11",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.70",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.48",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.14",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.73",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005746"
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04736"
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.76"
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.76"
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.76"
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421506.67",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15562752",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328301.72",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19681796",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","337388.04",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8280144",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328301.72",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19681796",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327854.23",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78727184",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"28","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","811.94",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341890",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.39",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.14",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","418.66",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.33",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.15",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328369.81",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.11",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.09",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.36",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.39",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","51.96",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.69",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005736"
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04729"
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.74",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.26",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.89"
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.89"
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.56",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.89"
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421760",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15682560",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328369.81",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19711576",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338508.88",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8308488",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328369.81",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19711576",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327993.16",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78846304",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"29","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","816.69",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342141",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.35",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.21",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","416.48",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.33",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.29",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328333.86",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.06",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.10",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.60",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.35",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.10",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.35",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.68",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005733"
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04725"
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.77",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.23",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.94"
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.94"
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.94"
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421648",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15602688",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328333.86",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19723698",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338401.21",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8287344",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328333.86",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19723698",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327440.53",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78894792",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"30","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","822.20",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342503",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.35",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.29",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","413.95",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.37",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.35",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328094.88",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.01",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.74",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.16",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.2%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.2%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.83",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.35",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.15",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.66",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005728"
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04725"
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.99"
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.1% of the total average of 10.1 cycles between issuing two instructions.","global","14.99"
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2619"
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.99"
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421093.33",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15506432",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328094.88",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19735994",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339536.88",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8278512",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328094.88",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19735994",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327850.82",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78943976",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"31","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.34",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341793",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.41",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.28",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","414.85",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.35",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.25",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328317.28",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.12",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.10",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.78",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.41",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.05",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.69",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005738"
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.0473"
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.88"
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.11",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.88"
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.88"
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421560",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15540224",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328317.28",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19710498",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339900.62",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8294424",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328317.28",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19710498",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327758.30",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78841992",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"32","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","818.81",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341901",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.42",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.26",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","415.10",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.37",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.34",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328274.10",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.12",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.12",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.72",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.42",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.14",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.69",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005739"
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04731"
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.76",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.24",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.88"
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.88"
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.88"
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421333.33",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15549440",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328274.10",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19709670",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","337780.29",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8280288",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328274.10",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19709670",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327629.89",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78838680",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"33","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","812.77",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","342736",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.28",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.10",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","419.30",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.39",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.01",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328183.33",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.90",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.14",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.24",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.28",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","51.82",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.67",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.62",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005725"
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04719"
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.75",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.25",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.89",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.89 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","15.1"
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.10",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","15.1"
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.78",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","15.1"
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421357.33",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15706112",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328183.33",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19761892",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338274.92",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8330520",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328183.33",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19761892",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327773.40",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","79047568",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"34","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","819.35",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341349",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.54",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.30",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","413.79",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.33",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.47",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328358.88",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.34",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.73",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.72",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.09",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.86",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.54",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","52.25",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.34",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.76",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005752"
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04741"
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.77",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.23",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.66"
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.66"
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2617"
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.76",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.66"
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421165.33",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15500288",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328358.88",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19659618",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","338544.92",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8260704",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328358.88",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19659618",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327485.32",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78638472",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"35","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6.24",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","810.57",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","341820",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","55.43",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","16.11",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Duration","usecond","419.17",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","57.37",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","55.13",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","328247.97",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","85.15",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Dropped Samples","sample","0",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","Maximum Sampling Interval","usecond","32",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","PM Sampling","# Pass Groups","","2",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.72",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","18.73",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Compute Workload Analysis","SM Busy","%","88.12",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","Tensor is the highest-utilized pipeline (88.1%) based on active cycles, taking into account the rates of its different instructions. It is the logical aggregation of individual tensor pipelines. It's dominated by its Tensor (FP) sub-pipeline. The pipeline is over-utilized and likely a performance bottleneck. Based on the number of executed instructions, the highest utilized pipeline (88.1%) is Tensor (FP). It executes 16-bit floating point tensor operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Memory Throughput","Gbyte/second","48.28",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Busy","%","55.43",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","51.94",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","0.33",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","95.68",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.70",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.005741"
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L1TEX might not be optimal. On average, only 32.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.04732"
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","One or More Eligible","%","18.77",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","No Eligible","%","81.23",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","1.90",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 1.90 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.85"
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10.10",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10.11",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.79",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.3 cycles being stalled waiting on a fixed latency execution dependency. Typically, this stall reason should be very low and only shows up as a top contributor in already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents about 42.2% of the total average of 10.1 cycles between issuing two instructions.","global","14.85"
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","61444.41",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Executed Instructions","inst","14255104",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","61470.41",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Instruction Statistics","Issued Instructions","inst","14261136",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","InstructionStats","","","","FPInstructions","OPT","This kernel executes 131072 fused and 262144 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 33% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2618"
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Block Size","","128",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Grid Size","","512",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","234",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","32.77",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","# SMs","SM","58",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Threads","thread","65536",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Uses Green Context","","0",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Launch Statistics","Waves Per SM","","4.41",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit SM","block","24",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Registers","block","2",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Shared Mem","block","3",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Block Limit Warps","block","12",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","8",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Theoretical Occupancy","%","16.67",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Occupancy","%","15.77",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","7.57",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Occupancy","","","","TheoreticalOccupancy","OPT","The 2.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. This kernel's theoretical occupancy (16.7%) is limited by the number of required registers.","global","14.85"
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","421610.67",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15703040",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","328247.97",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","19702356",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","339526.71",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","8312088",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","328247.97",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","19702356",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","327529.97",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","78809424",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.01",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Instructions","inst","156672",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Branch Efficiency","%","100",
"36","41250","python3.10","127.0.0.1","ampere_fp16_s1688gemm_fp16_128x128_ldg8_f2f_stages_32x1_nn","1","7","(128, 1, 1)","(16, 16, 2)","0","8.9","Source Counters","Avg. Divergent Branches","","0",
